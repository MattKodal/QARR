@font-face {
  font-family: "OpenSans-Light";
  src: url("../fonts/OpenSans-Light.woff") format("woff"), url("../fonts/OpenSans-Light.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-LightItalic";
  src: url("../fonts/OpenSans-LightItalic.woff") format("woff"), url("../fonts/OpenSans-LightItalic.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-Regular";
  src: url("../fonts/OpenSans-Regular.woff") format("woff"), url("../fonts/OpenSans-Regular.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-Italic";
  src: url("../fonts/OpenSans-Italic.woff") format("woff"), url("../fonts/OpenSans-Italic.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-SemiBold";
  src: url("../fonts/OpenSans-SemiBold.woff") format("woff"), url("../fonts/OpenSans-SemiBold.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-SemiBoldItalic";
  src: url("../fonts/OpenSans-SemiBoldItalic.woff") format("woff"), url("../fonts/OpenSans-SemiBoldItalic.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-Bold";
  src: url("../fonts/OpenSans-Bold.woff") format("woff"), url("../fonts/OpenSans-Bold.ttf") format("truetype");
}

@font-face {
  font-family: "OpenSans-BoldItalic";
  src: url("../fonts/OpenSans-BoldItalic.woff") format("woff"), url("../fonts/OpenSans-BoldItalic.ttf") format("truetype");
}

.qarr-widget-wrapper {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.qarr-widget {
  border: 1px solid #E9EFF4;
  border-radius: 5px;
  text-align: center;
  background: white;
}

.qarr-widget .item-primary {
  padding: 30px;
}

.qarr-widget .item-primary .item-value {
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 20px;
}

.qarr-widget .item-primary .item-heading {
  font-family: "OpenSans-Regular", "Helvetica", sans-serif;
  letter-spacing: .05em;
}

.qarr-widget .meta-items {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.qarr-widget .meta-col {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  padding: 20px;
}

.qarr-widget .meta-col:first-child {
  border-right: 1px solid #E9EFF4;
}

.qarr-widget.transparent {
  border: none;
}

.qarr-widget .widget-pie {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.qarr-widget .widget-pie .pie-area {
  margin-top: 20px;
}

.qarr-widget .widget-pie .pie-area path {
  cursor: pointer;
}

.qarr-widget .widget-pie .pie-stats {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  margin-top: 25px;
  -webkit-box-pack: space-evenly;
      -ms-flex-pack: space-evenly;
          justify-content: space-evenly;
}

.qarr-widget .widget-pie .pie-stats .stat-item {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding-top: 20px;
}

.qarr-widget .widget-pie .pie-stats .stat-item.stat-pending .stat-icon {
  border-color: #4da1ff;
}

.qarr-widget .widget-pie .pie-stats .stat-item.stat-approved .stat-icon {
  border-color: #2fec94;
}

.qarr-widget .widget-pie .pie-stats .stat-item.stat-rejected .stat-icon {
  border-color: #f07575;
}

.qarr-widget .widget-pie .pie-stats .stat-item.has-hover.stat-pending .stat-icon {
  background: #4da1ff;
  -webkit-transform: scale(1.4);
          transform: scale(1.4);
}

.qarr-widget .widget-pie .pie-stats .stat-item.has-hover.stat-approved .stat-icon {
  background: #2fec94;
  -webkit-transform: scale(1.4);
          transform: scale(1.4);
}

.qarr-widget .widget-pie .pie-stats .stat-item.has-hover.stat-rejected .stat-icon {
  background: #f07575;
  -webkit-transform: scale(1.4);
          transform: scale(1.4);
}

.qarr-widget .widget-pie .pie-stats .stat-icon {
  position: absolute;
  top: 0;
  width: 5px;
  height: 5px;
  margin: 5px 0;
  border-width: 2px;
  border-style: solid;
  border-radius: 50px;
  -webkit-transform-origin: center center;
          transform-origin: center center;
  -webkit-transition: all .3s ease;
  transition: all .3s ease;
}

.qarr-widget .widget-pie .pie-stats .stat-label {
  font-family: "OpenSans-Bold", "Helvetica", sans-serif;
  font-size: 12px;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%;
  text-rendering: optimizeLegibility;
}

.qarr-widget .widget-pie .pie-stats .stat-value {
  font-family: "OpenSans-Bold", "Helvetica", sans-serif;
  font-size: 12px;
  color: #a5a6a8;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%;
  text-rendering: optimizeLegibility;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/